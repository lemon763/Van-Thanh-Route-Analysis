# -*- coding: utf-8 -*-
"""CHÍNH_Lấy tọa độ từ kmz full điểm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arLWtRx3knr-hzooqM0wFdyeIuMp0oc3
"""

import xml.etree.ElementTree as ET
import pandas as pd
import os
import glob

from google.colab import drive
drive.mount('/content/drive')

import xml.etree.ElementTree as ET
import pandas as pd
import os
import glob

def convert_kml_to_dataframe(kml_path):
    if not os.path.exists(kml_path):
        print(f"The specified path does not exist: {kml_path}")
        return

    if os.path.isfile(kml_path):
        kml_files = [kml_path]
    elif os.path.isdir(kml_path):
        kml_files = glob.glob(os.path.join(kml_path, "*.kml"))
    else:
        print(f"Invalid path type: {kml_path}")
        return

    if not kml_files:
        print(f"No KML files found in the specified path: {kml_path}")
        return

    all_data = []

    for kml_file in kml_files:
        print(f"Processing file: {kml_file}")

        try:
            tree = ET.parse(kml_file)
            root = tree.getroot()
        except ET.ParseError as e:
            print(f"Error parsing {kml_file}: {e}")
            continue

        ns = {'kml': 'http://www.opengis.net/kml/2.2'}
        file_data = []

        # Tìm tất cả các Folder (Khu Vực)
        for folder in root.findall(".//kml:Folder", ns):
            folder_name = folder.find("kml:name", ns).text if folder.find("kml:name", ns) is not None else "Unnamed Folder"

            # Tìm tất cả các Placemark (đường thẳng và đa giác) trong mỗi Folder
            for placemark in folder.findall("kml:Placemark", ns):
                placemark_name = placemark.find("kml:name", ns).text if placemark.find("kml:name", ns) is not None else "Unnamed Placemark"

                # Tìm tọa độ của LineString
                linestring = placemark.find(".//kml:LineString/kml:coordinates", ns)
                if linestring is not None:
                    coordinates = linestring.text.strip().split()
                    line_coords = [(float(coord.split(",")[0]), float(coord.split(",")[1])) for coord in coordinates]
                    file_data.append([folder_name, placemark_name, "LineString", line_coords])

                # Tìm tọa độ của Polygon
                polygon = placemark.find(".//kml:Polygon/kml:outerBoundaryIs/kml:LinearRing/kml:coordinates", ns)
                if polygon is not None:
                    coordinates = polygon.text.strip().split()
                    polygon_coords = [(float(coord.split(",")[0]), float(coord.split(",")[1])) for coord in coordinates]
                    file_data.append([folder_name, placemark_name, "Polygon", polygon_coords])

        file_df = pd.DataFrame(file_data, columns=["Folder Name (Khu Vực)", "Placemark Name", "Type", "Coordinates"])

        if file_df.empty:
            print(f"No data found in {kml_file}")
        else:
            all_data.append(file_df)
            print(f"Processed {kml_file}")
            print(file_df)

    # Kết hợp tất cả các DataFrame thành một
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        return combined_df
    else:
        print("No data extracted from any KML file.")
        return None

# Example usage with your specified path
kml_path = "/content/drive/MyDrive/Data/KML file/"
df = convert_kml_to_dataframe(kml_path)

if df is not None:
    print(df)

"""# Nếu vừa chạy cái dưới thì KHÔNG KICK SAVE CSV CẢ BAY FILE LƯU FULL TỌA ĐỘ"""

import xml.etree.ElementTree as ET
import pandas as pd
import os
import glob

def convert_kml_to_dataframe(kml_path):
    if not os.path.exists(kml_path):
        print(f"The specified path does not exist: {kml_path}")
        return

    if os.path.isfile(kml_path):
        kml_files = [kml_path]
    elif os.path.isdir(kml_path):
        kml_files = glob.glob(os.path.join(kml_path, "*.kml"))
    else:
        print(f"Invalid path type: {kml_path}")
        return

    if not kml_files:
        print(f"No KML files found in the specified path: {kml_path}")
        return

    all_data = []

    for kml_file in kml_files:
        print(f"Processing file: {kml_file}")

        try:
            tree = ET.parse(kml_file)
            root = tree.getroot()
        except ET.ParseError as e:
            print(f"Error parsing {kml_file}: {e}")
            continue

        ns = {'kml': 'http://www.opengis.net/kml/2.2'}
        file_data = []

        # Tìm tất cả các Folder (Khu Vực)
        for folder in root.findall(".//kml:Folder", ns):
            folder_name = folder.find("kml:name", ns).text if folder.find("kml:name", ns) is not None else "Unnamed Folder"

            # Tìm tất cả các Placemark (đường thẳng và đa giác) trong mỗi Folder
            for placemark in folder.findall("kml:Placemark", ns):
                placemark_name = placemark.find("kml:name", ns).text if placemark.find("kml:name", ns) is not None else "Unnamed Placemark"

                # Tìm tọa độ của LineString
                linestring = placemark.find(".//kml:LineString/kml:coordinates", ns)
                if linestring is not None:
                    coordinates = linestring.text.strip().split()
                    for coord in coordinates:
                        lon, lat = map(float, coord.split(",")[:2])
                        file_data.append([folder_name, placemark_name, "LineString", lon, lat])

                # Tìm tọa độ của Polygon
                polygon = placemark.find(".//kml:Polygon/kml:outerBoundaryIs/kml:LinearRing/kml:coordinates", ns)
                if polygon is not None:
                    coordinates = polygon.text.strip().split()
                    for coord in coordinates:
                        lon, lat = map(float, coord.split(",")[:2])
                        file_data.append([folder_name, placemark_name, "Polygon", lon, lat])

        # Tạo DataFrame với các cột đã tách riêng kinh độ và vĩ độ
        file_df = pd.DataFrame(file_data, columns=["Folder Name (Khu Vực)", "Placemark Name", "Type", "Longitude", "Latitude"])

        if file_df.empty:
            print(f"No data found in {kml_file}")
        else:
            all_data.append(file_df)
            print(f"Processed {kml_file}")
            print(file_df)

    # Kết hợp tất cả các DataFrame thành một
    if all_data:
        combined_df = pd.concat(all_data, ignore_index=True)
        return combined_df
    else:
        print("No data extracted from any KML file.")
        return None

# Example usage with your specified path
kml_path = "/content/drive/MyDrive/Data/KML file/"
df = convert_kml_to_dataframe(kml_path)

if df is not None:
    print(df)

"""#BẤM CÁI TRÊN NÀY CHỈ LƯU 1 TỌA ĐỘ THÔI KH SỬ DỤNG ĐƯỢC ĐUÒNG CHẠYYYYY"""

# Bị lỗi "A lưới" và "Thừa Lưu - nước ngọt nên ra file bị thiếu Mã Tuyến_Thanh"
# Using case-insensitive matching and stripping spaces before comparison
df['Folder Name (Khu Vực)'] = df['Folder Name (Khu Vực)'].str.strip()

# Replace using case-insensitive and handling possible hidden characters
df['Folder Name (Khu Vực)'] = df['Folder Name (Khu Vực)'].replace(
    {'(?i)^A lưới$': 'A Lưới', '(?i)^Thừa Lưu - Nước ngọt$': 'Thừa Lưu - Nước Ngọt', '(?i)^Quãng Xuyên - ThuỷTân$': 'Thừa Lưu - Nước Ngọt', '(?i)^Quãng Xuyên - ThuỷTân$': 'Thừa Lưu - Nước Ngọt'},
    regex=True
)

# Chuẩn hóa dữ liệu trong cột 'Folder Name (Khu Vực)' với các quy tắc thay thế
df['Folder Name (Khu Vực)'] = df['Folder Name (Khu Vực)'].str.strip()

# Áp dụng thay thế để xử lý các tên không nhất quán và ẩn ký tự không mong muốn
df['Folder Name (Khu Vực)'] = df['Folder Name (Khu Vực)'].replace(
    {
        '(?i)^a lưới$': 'A Lưới',
        '(?i)^thừa lưu - nước ngọt$': 'Thừa Lưu - Nước Ngọt',
        '(?i)^quãng xuyên - thuỷtân$': 'Thừa Lưu - Nước Ngọt',
        '(?i)^kim long, nội thành$': 'Kim Long, nội thành'
    },
    regex=True
)

df.head(17)

df.tail(17)

# Đường dẫn để lưu file CSV
save_path = "/content/drive/MyDrive/Data/CSV_map_files/combined_kml_data.csv"

# Lưu DataFrame vào file CSV
if df is not None:
    df.to_csv(save_path, index=False, encoding='utf-8')
    print(f"DataFrame has been saved to {save_path}")
else:
    print("No DataFrame to save.")